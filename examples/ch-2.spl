#
# (-if 2 + 2 * 2 <= (2 + 2) * 2 then 100 else 321) * 100

# for i :: 0; i < 100; i = i + 1 {
#   i;
# }


create_counter :: (start) {
  x :: start;
  return () {
    x = x + 1;
    return x;
  };
};

print(clock());


# print(some_func(true) ++ " " ++ some_func(false));

# sqrt_iter_1 :: (guess, x) {
#   x :: 1
#   y :: 2
#   if is_good_enuough(guess, x) {
#     return guess;
#   } else {
#     improved = improve(guess, x)
#     return sqrt_iter(improved, x)
#   }
# }
# 
# map :: (list, fn) {
#   result :: [];
#   for item in list {
#     result = [...result, item];
#   }
# }
# 
# map(list, (x) { x * x })
# 
# def improve(guess, x) {
#   return (guess + (x / guess)) / 2
# }
# 
# def average(x, y) {
#   return (x + y) / 2
# }
# 
# def good_enough(guess, x) {
#   return if abs(square(guess) - x) else 0.001;
# }
# 
# def sqrt(x) {
#   sqrt_iter(1.0, x)
# }
